module.exports = [
	{
		enabled: true,
		name: 'consolidateNestedBlockStatements - TP-1',
		func: __dirname + '/../src/modules/safe/consolidateNestedBlockStatements',
		source: `if (a) {{do_a();}}`,
		expected: `if (a) {\n  do_a();\n}`,
	},
	{
		enabled: true,
		name: 'normalizeComputed - TP-1',
		func: __dirname + '/../src/modules/safe/normalizeComputed',
		source: `hello['world'][0]['%32']['valid']`,
		expected: `hello.world[0]['%32'].valid;`,
	},
	{
		enabled: true,
		name: 'normalizeEmptyStatements - TP-1',
		func: __dirname + '/../src/modules/safe/normalizeEmptyStatements',
		source: `;;var a = 3;;`,
		expected: `var a = 3;`,
	},
	{
		enabled: true,
		name: 'normalizeEmptyStatements - TN-1',
		func: __dirname + '/../src/modules/safe/normalizeEmptyStatements',
		source: `for (;;);`,
		expected: `for (;;);`,
	},
	{
		enabled: true,
		name: 'parseTemplateLiteralsIntoStringLiterals - TP-1',
		func: __dirname + '/../src/modules/safe/parseTemplateLiteralsIntoStringLiterals',
		source: '`hello ${"world"}!`;',
		expected: `'hello world!';`,
	},
	{
		enabled: true,
		name: 'removeDeadNodes - TP-1',
		func: __dirname + '/../src/modules/safe/removeDeadNodes',
		source: 'var a = 3, b = 12; console.log(b);',
		expected: `var b = 12;\nconsole.log(b);`,
	},
	{
		enabled: true,
		name: 'replaceCallExpressionsWithUnwrappedIdentifier - TP-1',
		func: __dirname + '/../src/modules/safe/replaceCallExpressionsWithUnwrappedIdentifier',
		source: `const a = () => btoa; a()('yo');`,
		expected: `const a = () => btoa;\nbtoa('yo');`,
	},
	{
		enabled: true,
		name: 'replaceCallExpressionsWithUnwrappedIdentifier - TP-2',
		func: __dirname + '/../src/modules/safe/replaceCallExpressionsWithUnwrappedIdentifier',
		source: `function a() {return btoa;} a()('yo');`,
		expected: `function a() {\n  return btoa;\n}\nbtoa('yo');`,
	},
	{
		enabled: true,
		name: 'replaceEvalCallsWithLiteralContent - TP-1',
		func: __dirname + '/../src/modules/safe/replaceEvalCallsWithLiteralContent',
		source: `eval('console.log("hello world")');`,
		expected: `console.log('hello world');\n;`,
	},
	{
		enabled: true,
		name: 'replaceFunctionShellsWithWrappedValue - TP-1',
		func: __dirname + '/../src/modules/safe/replaceFunctionShellsWithWrappedValue',
		source: `function a() {return String}\na()(val);`,
		expected: `function a() {\n  return String;\n}\nString(val);`,
	},
	{
		enabled: true,
		name: 'replaceIdentifierWithFixedAssignedValue - TP-1',
		func: __dirname + '/../src/modules/safe/replaceIdentifierWithFixedAssignedValue',
		source: `const a = 3; const b = a * 2; console.log(b + a);`,
		expected: `const a = 3;\nconst b = 3 * 2;\nconsole.log(b + 3);`,
	},
	{
		enabled: true,
		name: 'replaceIdentifierWithFixedValueNotAssignedAtDeclaration - TP-1',
		func: __dirname + '/../src/modules/safe/replaceIdentifierWithFixedValueNotAssignedAtDeclaration',
		source: `let a; a = 3; const b = a * 2; console.log(b + a);`,
		expected: `let a;\na = 3;\nconst b = 3 * 2;\nconsole.log(b + 3);`,
	},
	{
		enabled: true,
		name: 'resolveDeterministicIfStatements - TP-1',
		func: __dirname + '/../src/modules/safe/resolveDeterministicIfStatements',
		source: `if (true) do_a(); else do_b(); if (false) do_c(); else do_d();`,
		expected: `do_a();\ndo_d();`,
	},
	{
		enabled: true,
		name: 'resolveFunctionConstructorCalls - TP-1',
		func: __dirname + '/../src/modules/safe/resolveFunctionConstructorCalls',
		source: `const func = Function.constructor('', "console.log('hello world!');");`,
		expected: `const func = function () {\n  console.log('hello world!');\n};`,
	},
	{
		enabled: true,
		name: 'resolveMemberExpressionReferencesToArrayIndex - TP-1',
		func: __dirname + '/../src/modules/safe/resolveMemberExpressionReferencesToArrayIndex',
		source: `const a = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3];  b = a[0]; c = a[20];`,
		expected: `const a = [\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,
  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  2,\n  3\n];\nb = 1;\nc = 3;`,
	},
	{
		enabled: true,
		name: 'resolveMemberExpressionsWithDirectAssignment - TP-1',
		func: __dirname + '/../src/modules/safe/resolveMemberExpressionsWithDirectAssignment',
		source: `function a() {} a.b = 3; a.c = '5'; console.log(a.b + a.c);`,
		expected: `function a() {\n}\na.b = 3;\na.c = '5';\nconsole.log(3 + '5');`,
	},
	{
		enabled: true,
		name: 'resolveProxyCalls - TP-1',
		func: __dirname + '/../src/modules/safe/resolveProxyCalls',
		source: `function call1(a, b) {return a + b;} function call2(c, d) {return call1(c, d);} function call3(e, f) {return call2(e, f);}`,
		expected: `function call1(a, b) {\n  return a + b;\n}\nfunction call2(c, d) {\n  return call1(c, d);\n}\nfunction call3(e, f) {\n  return call1(e, f);\n}`,
	},
	{
		enabled: true,
		name: 'resolveProxyReferences - TP-1',
		func: __dirname + '/../src/modules/safe/resolveProxyReferences',
		source: `const a = ['']; const b = a; const c = b[0];`,
		expected: `const a = [''];\nconst b = a;\nconst c = a[0];`,
	},
	{
		enabled: true,
		name: 'resolveRedundantLogicalExpressions - TP-1',
		func: __dirname + '/../src/modules/safe/resolveRedundantLogicalExpressions',
		source: `if (false && true) {} if (false || true) {} if (true && false) {} if (true || false) {}`,
		expected: `if (false) {\n}\nif (true) {\n}\nif (false) {\n}\nif (true) {\n}`,
	},
	{
		enabled: true,
		name: 'unwrapFunctionShells - TP-1',
		func: __dirname + '/../src/modules/safe/unwrapFunctionShells',
		source: `function a(x) {return function b() {return x + 3}.apply(this, arguments);}`,
		expected: `function b(x) {\n  return x + 3;\n}`,
	},
	{
		enabled: true,
		name: 'unwrapFunctionShells - TP-2',
		func: __dirname + '/../src/modules/safe/unwrapFunctionShells',
		source: `function a(x) {return function() {return x + 3}.apply(this, arguments);}`,
		expected: `function a(x) {\n  return x + 3;\n}`,
	},
];